{"version":3,"file":"static/js/751.9f9b770c.chunk.js","mappings":"oQAGaA,EAAOC,EAAAA,EAAAA,KAAH,gIAQJC,EAAeD,EAAAA,EAAAA,KAAH,2DAKZE,GAASF,EAAAA,EAAAA,GAAOG,EAAAA,EAAPH,CAAH,iE,iPCIbI,EAAgBC,EAAAA,KAAaC,MAAM,CACvCC,KAAMF,EAAAA,KAEHG,QACC,yHACA,0IAEDC,aAGQC,EAAe,WAAO,IAAD,EAC1BC,GAAWC,EAAAA,EAAAA,MACjB,GAKIC,EAAAA,EAAAA,IAAQ,CACVC,cAAe,CAAEP,KAAM,GAAIQ,MAAO,GAAIC,SAAU,IAChDC,UAAUC,EAAAA,EAAAA,GAAYd,KANtBe,EADF,EACEA,SACAC,EAFF,EAEEA,aACaC,EAHf,EAGEC,UAAaD,OACbE,EAJF,EAIEA,MAKIC,GAAYC,EAAAA,EAAAA,MACZC,GAAgBD,EAAAA,EAAAA,MAChBE,GAAaF,EAAAA,EAAAA,MAEnB,OACE,+BACE,SAAC,KAAD,CACEG,SAAUR,GAAa,SAAAS,GACrBlB,GACEmB,EAAAA,EAAAA,IAAa,CACXvB,KAAMsB,EAAKtB,KACXQ,MAAOc,EAAKd,MACZC,SAAUa,EAAKb,YAGnBO,GACD,IAVH,UAYE,UAAC,KAAD,CAAaQ,UAAWV,EAAOd,KAA/B,WACE,SAAC,IAAD,CAAWyB,QAASR,EAApB,SAA+B,UAC/B,UAAC,IAAD,YACE,SAAC,IAAD,CAAkBS,cAAc,OAAhC,UACE,SAAC,IAAD,CAAYC,MAAM,gBAEpB,SAAC,EAAAC,GAAD,gBACEC,KAAK,QACDjB,EAAS,OAAQ,CAAEV,UAAU,KAFnC,IAGE4B,GAAIb,SAGR,SAAC,KAAD,oBAAeH,EAAOd,YAAtB,aAAe,EAAa+B,WAC5B,SAAC,IAAD,CAAWN,QAASL,EAApB,SAAgC,WAChC,UAAC,IAAD,YACE,SAAC,IAAD,CAAkBM,cAAc,OAAhC,UACE,SAAC,IAAD,CAAWC,MAAM,gBAEnB,SAAC,EAAAC,GAAD,gBACEC,KAAK,QACLG,YAAY,oBACRpB,EAAS,QAAS,CAAEV,UAAU,KAHpC,IAIE4B,GAAIV,SAGR,SAAC,IAAD,CAAWK,QAASN,EAApB,SAAmC,cACnC,UAAC,IAAD,YACE,SAAC,IAAD,CAAkBO,cAAc,OAAhC,UACE,SAAC,IAAD,CAAYC,MAAM,gBAEpB,SAAC,EAAAC,GAAD,gBACEC,KAAK,YACDjB,EAAS,WAAY,CAAEV,UAAU,KAFvC,IAGE4B,GAAIX,SAGR,SAAC,KAAD,CAAQc,YAAY,OAAOC,KAAK,KAAKL,KAAK,SAA1C,SAAmD,mBAO5D,EChGD,EAJqB,WACnB,OAAO,SAAC1B,EAAD,GACR,C,2DCAGgC,GAAaC,E,QAAAA,GAAW,CAC1BC,EAAG,wRACHC,YAAa,c,8ECDXA,GAAYF,EAAAA,EAAAA,GAAW,CACzBG,YAAa,YACbC,MAAsBC,EAAAA,EAAAA,MAAK,IAAK,CAAEC,KAAM,eAAgBL,SAAU,EAChDM,EAAAA,EAAAA,KAAI,OAAQ,CAAE,EAAG,uJACjBA,EAAAA,EAAAA,KAAI,OAAQ,CAAE,EAAG,iZ","sources":["components/ContactForm/ContactForm.styled.jsx","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage.jsx","../node_modules/@chakra-ui/icons/src/Unlock.tsx","../node_modules/@chakra-ui/icons/src/Email.tsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Button as Submit } from '@chakra-ui/react';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  max-width: 250px;\n  gap: 10px;\n`;\n\nexport const ErrorMessage = styled.span`\n  color: red;\n  font-size: 11px;\n`;\n\nexport const Button = styled(Submit)`\n  margin-left: 0px;\n  margin-top: 10px;\n`;\n","import { nanoid } from 'nanoid';\nimport {\n  Form,\n  ErrorMessage,\n  Button,\n} from 'components/ContactForm/ContactForm.styled';\nimport * as yup from 'yup';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useDispatch } from 'react-redux';\nimport { registerUser } from 'redux/auth/operationsAuth';\nimport {\n  FormLabel,\n  FormControl,\n  Input,\n  InputLeftElement,\n  InputGroup,\n} from '@chakra-ui/react';\nimport { AtSignIcon, EmailIcon, UnlockIcon } from '@chakra-ui/icons';\n\nconst newUserSchema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required(),\n});\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm({\n    defaultValues: { name: '', email: '', password: '' },\n    resolver: yupResolver(newUserSchema),\n  });\n  const inputName = nanoid();\n  const inputPassword = nanoid();\n  const inputEmail = nanoid();\n\n  return (\n    <>\n      <Form\n        onSubmit={handleSubmit(data => {\n          dispatch(\n            registerUser({\n              name: data.name,\n              email: data.email,\n              password: data.password,\n            })\n          );\n          reset();\n        })}\n      >\n        <FormControl isInvalid={errors.name}>\n          <FormLabel htmlFor={inputName}>Name</FormLabel>\n          <InputGroup>\n            <InputLeftElement pointerEvents=\"none\">\n              <AtSignIcon color=\"gray.300\" />\n            </InputLeftElement>\n            <Input\n              type=\"text\"\n              {...register('name', { required: true })}\n              id={inputName}\n            />\n          </InputGroup>\n          <ErrorMessage>{errors.name?.message}</ErrorMessage>\n          <FormLabel htmlFor={inputEmail}>Email</FormLabel>\n          <InputGroup>\n            <InputLeftElement pointerEvents=\"none\">\n              <EmailIcon color=\"gray.300\" />\n            </InputLeftElement>\n            <Input\n              type=\"email\"\n              placeholder=\"example@mail.com\"\n              {...register('email', { required: true })}\n              id={inputEmail}\n            />\n          </InputGroup>\n          <FormLabel htmlFor={inputPassword}>Password</FormLabel>\n          <InputGroup>\n            <InputLeftElement pointerEvents=\"none\">\n              <UnlockIcon color=\"gray.300\" />\n            </InputLeftElement>\n            <Input\n              type=\"password\"\n              {...register('password', { required: true })}\n              id={inputPassword}\n            />\n          </InputGroup>\n          <Button colorScheme=\"teal\" size=\"sm\" type=\"submit\">\n            Register\n          </Button>\n        </FormControl>\n      </Form>\n    </>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nconst RegisterPage = () => {\n  return <RegisterForm />;\n};\n\nexport default RegisterPage;\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const UnlockIcon = createIcon({\n  d: \"M19.5,9.5h-.75V6.75A6.751,6.751,0,0,0,5.533,4.811a1.25,1.25,0,1,0,2.395.717A4.251,4.251,0,0,1,16.25,6.75V9a.5.5,0,0,1-.5.5H4.5a2,2,0,0,0-2,2V22a2,2,0,0,0,2,2h15a2,2,0,0,0,2-2V11.5A2,2,0,0,0,19.5,9.5Zm-9.5,6a2,2,0,1,1,3,1.723V19.5a1,1,0,0,1-2,0V17.223A1.994,1.994,0,0,1,10,15.5Z\",\n  displayName: \"UnlockIcon\",\n})\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const EmailIcon = createIcon({\n  displayName: \"EmailIcon\",\n  path: (\n    <g fill=\"currentColor\">\n      <path d=\"M11.114,14.556a1.252,1.252,0,0,0,1.768,0L22.568,4.87a.5.5,0,0,0-.281-.849A1.966,1.966,0,0,0,22,4H2a1.966,1.966,0,0,0-.289.021.5.5,0,0,0-.281.849Z\" />\n      <path d=\"M23.888,5.832a.182.182,0,0,0-.2.039l-6.2,6.2a.251.251,0,0,0,0,.354l5.043,5.043a.75.75,0,1,1-1.06,1.061l-5.043-5.043a.25.25,0,0,0-.354,0l-2.129,2.129a2.75,2.75,0,0,1-3.888,0L7.926,13.488a.251.251,0,0,0-.354,0L2.529,18.531a.75.75,0,0,1-1.06-1.061l5.043-5.043a.251.251,0,0,0,0-.354l-6.2-6.2a.18.18,0,0,0-.2-.039A.182.182,0,0,0,0,6V18a2,2,0,0,0,2,2H22a2,2,0,0,0,2-2V6A.181.181,0,0,0,23.888,5.832Z\" />\n    </g>\n  ),\n})\n"],"names":["Form","styled","ErrorMessage","Button","Submit","newUserSchema","yup","shape","name","matches","required","RegisterForm","dispatch","useDispatch","useForm","defaultValues","email","password","resolver","yupResolver","register","handleSubmit","errors","formState","reset","inputName","nanoid","inputPassword","inputEmail","onSubmit","data","registerUser","isInvalid","htmlFor","pointerEvents","color","I","type","id","message","placeholder","colorScheme","size","UnlockIcon","createIcon","d","displayName","path","fill","EmailIcon","children","jsx"],"sourceRoot":""}
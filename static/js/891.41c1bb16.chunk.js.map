{"version":3,"file":"static/js/891.41c1bb16.chunk.js","mappings":"oQAGaA,EAAOC,EAAAA,EAAAA,KAAH,gIAQJC,EAAeD,EAAAA,EAAAA,KAAH,2DAKZE,GAASF,EAAAA,EAAAA,GAAOG,EAAAA,EAAPH,CAAH,iE,8PCZfI,GAAYC,EAAAA,EAAAA,GAAW,CACzBC,EAAG,s3BACHC,YAAa,YACbC,QAAS,c,SCYLC,EAAgBC,EAAAA,KAAaC,MAAM,CACvCC,KAAMF,EAAAA,KAEHG,QACC,yHACA,0IAEDC,WACHC,MAAOL,EAAAA,KAEJG,QACC,6EACA,gGAEDC,aAGQE,EAAc,SAAC,GAAkB,IAAD,IAAfC,EAAe,EAAfA,SAC5B,GAKIC,EAAAA,EAAAA,IAAQ,CACVC,cAAe,CAAEP,KAAM,GAAIG,MAAO,IAClCK,UAAUC,EAAAA,EAAAA,GAAYZ,KANtBa,EADF,EACEA,SACAC,EAFF,EAEEA,aACaC,EAHf,EAGEC,UAAaD,OACbE,EAJF,EAIEA,MAKIC,GAAYC,EAAAA,EAAAA,MACZC,GAAcD,EAAAA,EAAAA,MAEpB,OACE,+BACE,SAAC,KAAD,CACEX,SAAUM,GAAa,SAAAO,GACrBb,GAAS,UAAKa,IACdJ,GACD,IAJH,UAME,UAAC,KAAD,CAAaK,UAAWP,EAAOZ,KAA/B,WACE,SAAC,IAAD,CAAWoB,QAASL,EAApB,SAA+B,UAC/B,UAAC,IAAD,YACE,SAAC,IAAD,CAAkBM,cAAc,OAAhC,UACE,SAAC,IAAD,CAAYC,MAAM,gBAEpB,SAAC,EAAAC,GAAD,gBACEC,KAAK,OACLC,YAAY,gBACRf,EAAS,OAAQ,CAAER,UAAU,KAHnC,IAIEwB,GAAIX,SAGR,SAAC,KAAD,oBAAeH,EAAOZ,YAAtB,aAAe,EAAa2B,WAC5B,SAAC,IAAD,CAAWP,QAASH,EAApB,SAAiC,YACjC,UAAC,IAAD,YACE,SAAC,IAAD,CAAkBI,cAAc,OAAhC,UACE,SAAC7B,EAAD,CAAW8B,MAAM,gBAEnB,SAAC,EAAAC,GAAD,gBACEC,KAAK,MACLC,YAAY,gBACRf,EAAS,QAAS,CAAER,UAAU,KAHpC,IAIEwB,GAAIT,SAGR,SAAC,KAAD,oBAAeL,EAAOT,aAAtB,aAAe,EAAcwB,WAC7B,SAAC,KAAD,CAAQC,YAAY,OAAOC,KAAK,KAAKL,KAAK,SAA1C,SAAmD,sBAO5D,E,4BCzFYM,EAAO1C,EAAAA,EAAAA,GAAH,sFAMJ2C,EAAW3C,EAAAA,EAAAA,GAAH,+IAOR4C,EAAgB5C,EAAAA,EAAAA,IAAH,wDAKb6C,EAAoB7C,EAAAA,EAAAA,IAAH,8E,8BCf1BO,GAAWF,EAAAA,EAAAA,GAAW,CACxByC,YAAa,WACbC,MAAsBC,EAAAA,EAAAA,MAAK,IAAK,CAAEC,KAAM,OAAQC,OAAQ,eAAgBC,cAAe,QAASC,YAAa,IAAK9C,SAAU,EAC1G+C,EAAAA,EAAAA,KAAI,OAAQ,CAAE,EAAG,gEACjBA,EAAAA,EAAAA,KAAI,OAAQ,CAAE,EAAG,iECJjC9C,GAAaF,EAAAA,EAAAA,GAAW,CAC1ByC,YAAa,aACbC,MAAsBO,EAAAA,EAAAA,KAAI,IAAK,CAAEF,KAAM,eAAgB9C,UAA0BgD,EAAAA,EAAAA,KAAI,OAAQ,CAAE,EAAG,4cCLvFC,EAAUvD,EAAAA,EAAAA,IAAH,uOAaPwD,EAAcxD,EAAAA,EAAAA,IAAH,oL,UCfXyD,EAAc,SAAAC,GAAK,OAAIA,EAAMC,SAAV,E,UCEnBC,EAAe5D,EAAAA,EAAAA,IAAH,oFCuBnBS,EAAgBC,EAAAA,KAAaC,MAAM,CACvCC,KAAMF,EAAAA,KAEHG,QACC,yHACA,0IAEDC,WACHC,MAAOL,EAAAA,KAEJG,QACC,6EACA,gGAEDC,aAGQ+C,EAAa,SAAC,GAAoD,IAAD,IAAjDvB,EAAiD,EAAjDA,GAAIwB,EAA6C,EAA7CA,YAAaC,EAAgC,EAAhCA,cAAeC,EAAiB,EAAjBA,WACnDC,GAAUC,EAAAA,EAAAA,IAAYT,GAAtBQ,MACFE,GAAWC,EAAAA,EAAAA,MACjB,GAA8CC,EAAAA,EAAAA,UAAS,IAAvD,eAAOC,EAAP,KAAwBC,EAAxB,KACA,GAAkDF,EAAAA,EAAAA,UAAS,IAA3D,eAAOG,EAAP,KAA0BC,EAA1B,KACM9C,GAAYC,EAAAA,EAAAA,MACZC,GAAcD,EAAAA,EAAAA,OAEpB8C,EAAAA,EAAAA,YAAU,WACRH,EAAmBT,GACnBW,EAAqBV,EACtB,GAAE,CAACD,EAAaC,IAEjB,OAKI7C,EAAAA,EAAAA,IAAQ,CACVC,cAAe,CAAEP,KAAMkD,EAAa/C,MAAOgD,GAC3C3C,UAAUC,EAAAA,EAAAA,GAAYZ,KANtBa,EADF,EACEA,SACAC,EAFF,EAEEA,aACaC,EAHf,EAGEC,UAAaD,OACbE,EAJF,EAIEA,MAmCF,OACE,+BACE,UAAC,KAAD,CACET,SAAUM,GAAa,SAAAO,IAtBE,SAACQ,EAAIR,GAClC,IAAM6C,EAAgB7C,EAAKlB,KAAKgE,oBAG1BC,EAASZ,EAAMa,MACnB,SAAAC,GAAI,OAAIJ,IAAkBI,EAAKnE,KAAKgE,mBAAhC,IAIgB,kBAAXC,EACTG,OAAOC,MAAMJ,EAAOjE,KAAO,4BAE3BuD,GACEe,EAAAA,EAAAA,IAAa,CAAEC,UAAW7C,EAAI1B,KAAMkB,EAAKlB,KAAMwE,OAAQtD,EAAKf,SAE9DiD,IAEH,CAMOqB,CAAuB/C,EAAIR,GAC3BJ,GACD,IAJH,WAME,SAAC,IAAD,CAAS4D,SAAS,MAAlB,SAAwB,yBACxB,UAAC,KAAD,CAAavD,UAAWP,EAAOZ,KAA/B,WACE,SAAC,IAAD,CAAWoB,QAASL,EAApB,SAA+B,UAC/B,UAAC,IAAD,YACE,SAAC,IAAD,CAAkBM,cAAc,OAAhC,UACE,SAAC,IAAD,CAAYC,MAAM,gBAGpB,SAAC,EAAAC,GAAD,gBACEC,KAAK,QACDd,EAAS,OAAQ,CACnBR,UAAU,KAHd,IAKEwB,GAAIX,EACJ4D,SAnDa,SAAAC,GACvB,IAAQC,EAAUD,EAAEE,cAAZD,MACRlB,EAAmBkB,EACpB,EAiDWA,MAAOnB,SAGX,SAAC,KAAD,oBAAe9C,EAAOZ,YAAtB,aAAe,EAAa2B,WAC5B,SAAC,IAAD,CAAWP,QAASH,EAApB,SAAiC,YACjC,UAAC,IAAD,YACE,SAAC,IAAD,CAAkBI,cAAc,OAAhC,UACE,SAAC7B,EAAD,CAAW8B,MAAM,gBAEnB,SAAC,EAAAC,GAAD,gBACEC,KAAK,OACDd,EAAS,QAAS,CAAER,UAAU,KAFpC,IAGEwB,GAAIT,EACJ0D,SA5De,SAAAC,GACzB,IAAQC,EAAUD,EAAEE,cAAZD,MACRhB,EAAqBgB,EACtB,EA0DWA,MAAOjB,SAGX,SAAC,KAAD,oBAAehD,EAAOT,aAAtB,aAAe,EAAcwB,WAC7B,UAACqB,EAAD,YACE,SAAC,KAAD,CAAQpB,YAAY,OAAOC,KAAK,KAAKL,KAAK,SAA1C,SAAmD,oBAGnD,SAAC,KAAD,CACEI,YAAY,MACZC,KAAK,KACLL,KAAK,SACLuD,QAAS,kBAAM3B,GAAN,EAJX,SAKC,oBAQZ,EClJK4B,EAAYC,SAASC,cAAc,eAE5BC,EAAQ,SAAC,GAAoD,IAAlDzD,EAAiD,EAAjDA,GAAIwB,EAA6C,EAA7CA,YAAaC,EAAgC,EAAhCA,cAAeC,EAAiB,EAAjBA,WAqBtD,OAdAU,EAAAA,EAAAA,YAAU,WACR,IAAMsB,EAAiB,SAAAR,GACN,WAAXA,EAAES,MACJjC,GAEH,EAID,OAFAgB,OAAOkB,iBAAiB,UAAWF,GAE5B,WACLhB,OAAOmB,oBAAoB,UAAWH,EACvC,CACF,GAAE,CAAChC,KAEGoC,EAAAA,EAAAA,eACL,SAAC7C,EAAD,CAASoC,QArBiB,SAAAH,GACtBA,EAAEE,gBAAkBF,EAAEa,QACxBrC,GAEH,EAiBC,UACE,SAACR,EAAD,WACE,SAACK,EAAD,CACEvB,GAAIA,EACJwB,YAAaA,EACbC,cAAeA,EACfC,WAAYA,QAIlB4B,EAEH,E,SC3BYU,EAAc,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACtBpC,GAAWC,EAAAA,EAAAA,MACjB,GAA4BC,EAAAA,EAAAA,WAAS,GAArC,eAAOmC,EAAP,KAAeC,EAAf,KACA,GAAsCpC,EAAAA,EAAAA,UAAS,IAA/C,eAAOP,EAAP,KAAoB4C,EAApB,KACA,GAA0CrC,EAAAA,EAAAA,UAAS,IAAnD,eAAON,EAAP,KAAsB4C,EAAtB,KACA,GAAkCtC,EAAAA,EAAAA,UAAS,MAA3C,eAAOuC,EAAP,KAAkBC,EAAlB,KASA,OACE,UAACjE,EAAD,YACE,SAACF,EAAD,UACG6D,EAASO,KAAI,gBAAGxE,EAAH,EAAGA,GAAI1B,EAAP,EAAOA,KAAMwE,EAAb,EAAaA,OAAb,OACZ,UAACzC,EAAD,YACE,2BACE,UAAC,IAAD,CAAM2C,SAAS,OAAOyB,GAAG,OAAzB,UACGnG,EAAK,KAAGwE,QAGb,UAACvC,EAAD,YACE,SAAC,KAAD,CACEL,YAAY,SACZC,KAAK,KACLL,KAAK,SACL4E,UAAU,SAAChE,EAAD,CAAUiE,QAAS,IAC7BtB,QAAS,YAxBL,SAAArD,GAChBmE,GAAU,GACVI,EAAavE,EACd,CAsBe4E,CAAU5E,GACVoE,EAAe9F,GACf+F,EAAiBvB,EAClB,EATH,SAUC,YAGD,SAAC,KAAD,CACE5C,YAAY,MACZC,KAAK,KACLL,KAAK,SACLuD,QAAS,WACPxB,GAASgD,EAAAA,EAAAA,IAAc7E,GACxB,EANH,UAQE,SAACgB,EAAD,CAAY2D,QAAS,WA5BZ3E,EADH,MAmCfkE,IACC,SAACT,EAAD,CACEzD,GAAIsE,EACJ9C,YAAaA,EACbC,cAAeA,EACfC,WA/CW,WACjByC,GAAU,EACX,MAkDF,EC3EY1G,EAAOC,EAAAA,EAAAA,KAAH,wGCOXoH,EAAe1G,EAAAA,KAAaC,MAAM,CACtC0G,OAAQ3G,EAAAA,KAELG,QACC,yHACA,0IAEDC,aAGQwG,GAAS,SAAC,GAAkB,IAAD,EAAf/B,EAAe,EAAfA,SACvB,GAGIrE,EAAAA,EAAAA,IAAQ,CACVC,cAAe,CAAEkG,OAAQ,IACzBjG,UAAUC,EAAAA,EAAAA,GAAY+F,KAJtB9F,EADF,EACEA,SACaE,EAFf,EAEEC,UAAaD,OAKT+F,GAAc3F,EAAAA,EAAAA,MAEpB,OACE,UAAC7B,EAAD,YACE,SAAC,IAAD,CAAWiC,QAASuF,EAApB,SAAiC,2BACjC,SAAC,EAAApF,GAAD,gBACEM,KAAK,KACLL,KAAK,OACLC,YAAY,QACRf,EAAS,WAJf,IAKEiE,SAAUA,EACVjD,GAAIiF,MAEN,SAAC,KAAD,oBAAe/F,EAAO6F,cAAtB,aAAe,EAAe9E,YAGnC,E,4CCzCYiF,GAAS,WACpB,OAAO,SAAC,KAAD,CAAS/E,KAAK,KAAKP,MAAM,SACjC,ECJYuF,GAAY,SAAA/D,GAAK,OAAIA,EAAMgE,QAAQL,MAAlB,ECkBjBM,GAAe,WAC1B,OAAoCzD,EAAAA,EAAAA,IAAYT,GAAxCQ,EAAR,EAAQA,MAAO2D,EAAf,EAAeA,UAAWC,EAA1B,EAA0BA,MACpBR,GAASnD,EAAAA,EAAAA,IAAYuD,IACrBK,GAAWC,EAAAA,EAAAA,SAAO,GAClBC,GAAcD,EAAAA,EAAAA,SAAO,GACrB5D,GAAWC,EAAAA,EAAAA,OAEjBM,EAAAA,EAAAA,YAAU,WAKR,OAJIoD,EAASG,UACXH,EAASG,SAAU,EACnB9D,GAAS+D,EAAAA,EAAAA,QAEJ,WACL/D,GAASgE,EAAAA,GAAAA,KACV,CACF,GAAE,CAAChE,IAEJ,IAiBMiE,EAAoB,SAAAtG,GACxB,IAAM6C,EAAgB7C,EAAKlB,KAAKgE,oBAG1BC,EAASZ,EAAMa,MACnB,SAAAC,GAAI,OAAIJ,IAAkBI,EAAKnE,KAAKgE,mBAAhC,IAIgB,kBAAXC,EACTG,OAAOC,MAAMJ,EAAOjE,KAAO,4BAE3BuD,GAASkE,EAAAA,EAAAA,IAAW,CAAEzH,KAAMkB,EAAKlB,KAAMwE,OAAQtD,EAAKf,SACpDiH,EAAYC,SAAU,EAEzB,EAEKK,EA1BqB,WACzB,GAAIrE,EAAO,CACT,IAAMsE,EAAkBlB,EAAOmB,cAC/B,OAAOvE,EAAMoD,QAAO,SAAAtC,GAAI,OACtBA,EAAKnE,KAAKgE,oBAAoB6D,SAASF,EADjB,GAGzB,CACF,CAmBuBG,GAExB,OACE,iCACE,SAAC,MAAD,WACE,SAAC,IAAD,CAASpD,SAAS,MAAlB,SAAwB,iBAE1B,SAAC,MAAD,WACE,SAACtE,EAAD,CAAaC,SA1CO,SAAAa,GACxBsG,EAAkBtG,EACnB,OA0CG,SAAC,MAAD,WACE,SAAC,IAAD,CAASwD,SAAS,MAAlB,SAAwB,gBAE1B,UAAC,MAAD,YACE,SAACgC,GAAD,CAAQ/B,SA5CO,SAAAC,GACnBrB,GAASwE,EAAAA,GAAAA,GAAUnD,EAAEE,cAAcD,OACpC,IA2CMmC,IAAa,SAACJ,GAAD,OAGfvD,EAAM2E,OAAS,GACd,SAACtC,EAAD,CAAaC,SAAU+B,KAEtBV,IAAa,uBAAG,gBAElBC,IAAS,SAAC,MAAD,UAAeA,MAG9B,EAED,K,0JCtFIgB,GAAUC,EAAAA,EAAAA,IAAW,SAAkBC,EAAOC,GAC9C,IAAIC,GAASC,EAAAA,EAAAA,IAAe,UAAWH,GACzC,GAA+BI,EAAAA,EAAAA,IAAiBJ,GAA1BK,GAAtB,EAAQC,WAAR,aACA,OAAuBC,EAAAA,EAAAA,KACrBC,EAAAA,EAAAA,IADwB,gBAGtBP,IAAAA,EACAK,WAAWG,EAAAA,EAAAA,IAAG,iBAAkBT,EAAMM,YACnCD,GALmB,IAMtB,MAAOH,IAGZ,IACDJ,EAAQ,YAAc,S","sources":["components/ContactForm/ContactForm.styled.jsx","../node_modules/@chakra-ui/icons/src/Phone.tsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","../node_modules/@chakra-ui/icons/src/Edit.tsx","../node_modules/@chakra-ui/icons/src/Delete.tsx","components/Modal/Modal.styled.jsx","redux/contacts/selectorsContacts.js","components/UpdateForm/UpdateForm.styled.jsx","components/UpdateForm/UpdateFrom.jsx","components/Modal/Modal.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Loader/Loader.jsx","redux/filter/selectorsFilter.js","pages/ContactsPage.jsx","../node_modules/@chakra-ui/layout/src/heading.tsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Button as Submit } from '@chakra-ui/react';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  max-width: 250px;\n  gap: 10px;\n`;\n\nexport const ErrorMessage = styled.span`\n  color: red;\n  font-size: 11px;\n`;\n\nexport const Button = styled(Submit)`\n  margin-left: 0px;\n  margin-top: 10px;\n`;\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const PhoneIcon = createIcon({\n  d: \"M2.20731,0.0127209 C2.1105,-0.0066419 1.99432,-0.00664663 1.91687,0.032079 C0.871279,0.438698 0.212942,1.92964 0.0580392,2.95587 C-0.426031,6.28627 2.20731,9.17133 4.62766,11.0689 C6.77694,12.7534 10.9012,15.5223 13.3409,12.8503 C13.6507,12.5211 14.0186,12.037 13.9993,11.553 C13.9412,10.7397 13.186,10.1588 12.6051,9.71349 C12.1598,9.38432 11.2304,8.47427 10.6495,8.49363 C10.1267,8.51299 9.79754,9.05515 9.46837,9.38432 L8.88748,9.96521 C8.79067,10.062 7.55145,9.24878 7.41591,9.15197 C6.91248,8.8228 6.4284,8.45491 6.00242,8.04829 C5.57644,7.64167 5.18919,7.19632 4.86002,6.73161 C4.7632,6.59607 3.96933,5.41495 4.04678,5.31813 C4.04678,5.31813 4.72448,4.58234 4.91811,4.2919 C5.32473,3.67229 5.63453,3.18822 5.16982,2.45243 C4.99556,2.18135 4.78257,1.96836 4.55021,1.73601 C4.14359,1.34875 3.73698,0.942131 3.27227,0.612963 C3.02055,0.419335 2.59457,0.0708094 2.20731,0.0127209 Z\",\n  displayName: \"PhoneIcon\",\n  viewBox: \"0 0 14 14\",\n})\n","import PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\nimport {\n  Form,\n  ErrorMessage,\n  Button,\n} from 'components/ContactForm/ContactForm.styled';\nimport * as yup from 'yup';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport {\n  FormLabel,\n  FormControl,\n  Input,\n  InputLeftElement,\n  InputGroup,\n} from '@chakra-ui/react';\nimport { AtSignIcon, PhoneIcon } from '@chakra-ui/icons';\n\nconst contactSchema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required(),\n  phone: yup\n    .string()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required(),\n});\n\nexport const ContactForm = ({ onSubmit }) => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm({\n    defaultValues: { name: '', phone: '' },\n    resolver: yupResolver(contactSchema),\n  });\n  const inputName = nanoid();\n  const inputNumber = nanoid();\n\n  return (\n    <>\n      <Form\n        onSubmit={handleSubmit(data => {\n          onSubmit({ ...data });\n          reset();\n        })}\n      >\n        <FormControl isInvalid={errors.name}>\n          <FormLabel htmlFor={inputName}>Name</FormLabel>\n          <InputGroup>\n            <InputLeftElement pointerEvents=\"none\">\n              <AtSignIcon color=\"gray.300\" />\n            </InputLeftElement>\n            <Input\n              type=\"text\"\n              placeholder=\"Contact name\"\n              {...register('name', { required: true })}\n              id={inputName}\n            />\n          </InputGroup>\n          <ErrorMessage>{errors.name?.message}</ErrorMessage>\n          <FormLabel htmlFor={inputNumber}>Number</FormLabel>\n          <InputGroup>\n            <InputLeftElement pointerEvents=\"none\">\n              <PhoneIcon color=\"gray.300\" />\n            </InputLeftElement>\n            <Input\n              type=\"tel\"\n              placeholder=\"Phone number\"\n              {...register('phone', { required: true })}\n              id={inputNumber}\n            />\n          </InputGroup>\n          <ErrorMessage>{errors.phone?.message}</ErrorMessage>\n          <Button colorScheme=\"teal\" size=\"sm\" type=\"submit\">\n            Add contact\n          </Button>\n        </FormControl>\n      </Form>\n    </>\n  );\n};\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  padding: 0px;\n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n  width: 100%;\n  justify-content: space-between;\n  align-items: baseline;\n  margin-bottom: 10px;\n`;\nexport const ContactsBlock = styled.div`\n  display: flex;\n  gap: 20px;\n`;\n\nexport const UpdateButtonBlock = styled.div`\n  display: flex;\n  gap: 10px;\n  margin-left: 10px;\n`;\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const EditIcon = createIcon({\n  displayName: \"EditIcon\",\n  path: (\n    <g fill=\"none\" stroke=\"currentColor\" strokeLinecap=\"round\" strokeWidth=\"2\">\n      <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\" />\n      <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\" />\n    </g>\n  ),\n})\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const DeleteIcon = createIcon({\n  displayName: \"DeleteIcon\",\n  path: (\n    <g fill=\"currentColor\">\n      <path d=\"M19.452 7.5H4.547a.5.5 0 00-.5.545l1.287 14.136A2 2 0 007.326 24h9.347a2 2 0 001.992-1.819L19.95 8.045a.5.5 0 00-.129-.382.5.5 0 00-.369-.163zm-9.2 13a.75.75 0 01-1.5 0v-9a.75.75 0 011.5 0zm5 0a.75.75 0 01-1.5 0v-9a.75.75 0 011.5 0zM22 4h-4.75a.25.25 0 01-.25-.25V2.5A2.5 2.5 0 0014.5 0h-5A2.5 2.5 0 007 2.5v1.25a.25.25 0 01-.25.25H2a1 1 0 000 2h20a1 1 0 000-2zM9 3.75V2.5a.5.5 0 01.5-.5h5a.5.5 0 01.5.5v1.25a.25.25 0 01-.25.25h-5.5A.25.25 0 019 3.75z\" />\n    </g>\n  ),\n})\n","import styled from '@emotion/styled';\n\nexport const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.8);\n  z-index: 1200;\n`;\n\nexport const ModalWindow = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 300px;\n  height: 300px;\n  background-color: white;\n  border-radius: 10%;\n`;\n","export const getContacts = state => state.phonebook;\n","import styled from '@emotion/styled';\n\nexport const ButtonsBlock = styled.div`\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n`;\n","import PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\nimport {\n  Form,\n  ErrorMessage,\n  Button,\n} from 'components/ContactForm/ContactForm.styled';\nimport * as yup from 'yup';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { patchContact } from 'redux/contacts/operationsContacts';\nimport { getContacts } from 'redux/contacts/selectorsContacts';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport {\n  FormLabel,\n  FormControl,\n  Input,\n  InputLeftElement,\n  InputGroup,\n  Heading,\n} from '@chakra-ui/react';\nimport { AtSignIcon, PhoneIcon } from '@chakra-ui/icons';\nimport { ButtonsBlock } from './UpdateForm.styled';\n\nconst contactSchema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required(),\n  phone: yup\n    .string()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required(),\n});\n\nexport const UpdateForm = ({ id, contactName, contactNumber, closeModal }) => {\n  const { items } = useSelector(getContacts);\n  const dispatch = useDispatch();\n  const [formContactName, setFormContactName] = useState('');\n  const [formContactNumber, setFormContactNumber] = useState('');\n  const inputName = nanoid();\n  const inputNumber = nanoid();\n\n  useEffect(() => {\n    setFormContactName(contactName);\n    setFormContactNumber(contactNumber);\n  }, [contactName, contactNumber]);\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm({\n    defaultValues: { name: contactName, phone: contactNumber },\n    resolver: yupResolver(contactSchema),\n  });\n\n  const handleNameChange = e => {\n    const { value } = e.currentTarget;\n    setFormContactName(value);\n  };\n\n  const handleNumberChange = e => {\n    const { value } = e.currentTarget;\n    setFormContactNumber(value);\n  };\n\n  const ckeckDuplicatedContact = (id, data) => {\n    const normalizaName = data.name.toLocaleLowerCase();\n\n    //check for duplicate name\n    const result = items.find(\n      item => normalizaName === item.name.toLocaleLowerCase()\n    );\n\n    //checking if find() return 'object'\n    if (typeof result === 'object') {\n      window.alert(result.name + ' is already in contacts');\n    } else {\n      dispatch(\n        patchContact({ contactId: id, name: data.name, number: data.phone })\n      );\n      closeModal();\n    }\n  };\n\n  return (\n    <>\n      <Form\n        onSubmit={handleSubmit(data => {\n          ckeckDuplicatedContact(id, data);\n          reset();\n        })}\n      >\n        <Heading fontSize=\"1xl\">Сhange contact</Heading>\n        <FormControl isInvalid={errors.name}>\n          <FormLabel htmlFor={inputName}>Name</FormLabel>\n          <InputGroup>\n            <InputLeftElement pointerEvents=\"none\">\n              <AtSignIcon color=\"gray.300\" />\n            </InputLeftElement>\n\n            <Input\n              type=\"text\"\n              {...register('name', {\n                required: true,\n              })}\n              id={inputName}\n              onChange={handleNameChange}\n              value={formContactName}\n            />\n          </InputGroup>\n          <ErrorMessage>{errors.name?.message}</ErrorMessage>\n          <FormLabel htmlFor={inputNumber}>Number</FormLabel>\n          <InputGroup>\n            <InputLeftElement pointerEvents=\"none\">\n              <PhoneIcon color=\"gray.300\" />\n            </InputLeftElement>\n            <Input\n              type=\"tel\"\n              {...register('phone', { required: true })}\n              id={inputNumber}\n              onChange={handleNumberChange}\n              value={formContactNumber}\n            />\n          </InputGroup>\n          <ErrorMessage>{errors.phone?.message}</ErrorMessage>\n          <ButtonsBlock>\n            <Button colorScheme=\"teal\" size=\"sm\" type=\"submit\">\n              Update contact\n            </Button>\n            <Button\n              colorScheme=\"red\"\n              size=\"sm\"\n              type=\"submit\"\n              onClick={() => closeModal()}\n            >\n              Close\n            </Button>\n          </ButtonsBlock>\n        </FormControl>\n      </Form>\n    </>\n  );\n};\n\nUpdateForm.propTypes = {\n  id: PropTypes.string.isRequired,\n  contactName: PropTypes.string.isRequired,\n  contactNumber: PropTypes.string.isRequired,\n  closeModal: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { Overlay, ModalWindow } from 'components/Modal/Modal.styled';\nimport { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport { UpdateForm } from 'components/UpdateForm/UpdateFrom';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport const Modal = ({ id, contactName, contactNumber, closeModal }) => {\n  const handleBackdropClick = e => {\n    if (e.currentTarget === e.target) {\n      closeModal();\n    }\n  };\n\n  useEffect(() => {\n    const handaleKeyDown = e => {\n      if (e.code === 'Escape') {\n        closeModal();\n      }\n    };\n\n    window.addEventListener('keydown', handaleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handaleKeyDown);\n    };\n  }, [closeModal]);\n\n  return createPortal(\n    <Overlay onClick={handleBackdropClick}>\n      <ModalWindow>\n        <UpdateForm\n          id={id}\n          contactName={contactName}\n          contactNumber={contactNumber}\n          closeModal={closeModal}\n        />\n      </ModalWindow>\n    </Overlay>,\n    modalRoot\n  );\n};\n\nModal.propTypes = {\n  id: PropTypes.string.isRequired,\n  contactName: PropTypes.string.isRequired,\n  contactNumber: PropTypes.string.isRequired,\n  closeModal: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport {\n  ContactsBlock,\n  List,\n  ListItem,\n  UpdateButtonBlock,\n} from 'components/ContactList/ContactList.styled';\nimport { deleteContact } from 'redux/contacts/operationsContacts';\nimport { useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport { DeleteIcon, EditIcon } from '@chakra-ui/icons';\nimport { Button } from 'components/ContactForm/ContactForm.styled';\nimport { Modal } from 'components/Modal/Modal';\nimport { Text } from '@chakra-ui/react';\n\nexport const ContactList = ({ contacts }) => {\n  const dispatch = useDispatch();\n  const [isOpen, setIsOpen] = useState(false);\n  const [contactName, setContactName] = useState('');\n  const [contactNumber, setContactNumber] = useState('');\n  const [idContact, setContactId] = useState(null);\n  const modalOpen = id => {\n    setIsOpen(true);\n    setContactId(id);\n  };\n  const modalClose = () => {\n    setIsOpen(false);\n  };\n\n  return (\n    <ContactsBlock>\n      <List>\n        {contacts.map(({ id, name, number }) => (\n          <ListItem key={id}>\n            <span>\n              <Text fontSize=\"18px\" as=\"cite\">\n                {name}: {number}\n              </Text>\n            </span>\n            <UpdateButtonBlock>\n              <Button\n                colorScheme=\"yellow\"\n                size=\"sm\"\n                type=\"button\"\n                leftIcon={<EditIcon boxSize={4} />}\n                onClick={() => {\n                  modalOpen(id);\n                  setContactName(name);\n                  setContactNumber(number);\n                }}\n              >\n                Update\n              </Button>\n              <Button\n                colorScheme=\"red\"\n                size=\"sm\"\n                type=\"button\"\n                onClick={() => {\n                  dispatch(deleteContact(id));\n                }}\n              >\n                <DeleteIcon boxSize={4} />\n              </Button>\n            </UpdateButtonBlock>\n          </ListItem>\n        ))}\n      </List>\n      {isOpen && (\n        <Modal\n          id={idContact}\n          contactName={contactName}\n          contactNumber={contactNumber}\n          closeModal={modalClose}\n        />\n      )}\n    </ContactsBlock>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  max-width: 250px;\n  gap: 10px;\n`;\n","import PropTypes from 'prop-types';\nimport { Form } from 'components/Filter/Filter.styled';\nimport { ErrorMessage } from 'components/ContactForm/ContactForm.styled';\nimport { nanoid } from 'nanoid';\nimport * as yup from 'yup';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { FormLabel, Input } from '@chakra-ui/react';\n\nconst filterSchema = yup.object().shape({\n  filter: yup\n    .string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required(),\n});\n\nexport const Filter = ({ onChange }) => {\n  const {\n    register,\n    formState: { errors },\n  } = useForm({\n    defaultValues: { filter: '' },\n    resolver: yupResolver(filterSchema),\n  });\n  const inputFilter = nanoid();\n\n  return (\n    <Form>\n      <FormLabel htmlFor={inputFilter}>Find contacts by name</FormLabel>\n      <Input\n        size=\"sm\"\n        type=\"text\"\n        placeholder=\"Name\"\n        {...register('filter')}\n        onChange={onChange}\n        id={inputFilter}\n      />\n      <ErrorMessage>{errors.filter?.message}</ErrorMessage>\n    </Form>\n  );\n};\n\nFilter.propTypes = {\n  onChange: PropTypes.func.isRequired,\n};\n","import { Spinner } from '@chakra-ui/react';\n\nexport const Loader = () => {\n  return <Spinner size=\"lg\" color=\"green\" />;\n};\n","export const getFilter = state => state.filters.filter;\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport {\n  FormBlock,\n  LoadingContainer,\n  RequestError,\n} from 'components/App/App.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filter/filterSlice';\nimport { clearContacts } from 'redux/contacts/contactsSlice';\nimport { useEffect, useRef } from 'react';\nimport { addContact, fetchContacts } from 'redux/contacts/operationsContacts';\nimport { Loader } from 'components/Loader/Loader';\nimport { getContacts } from 'redux/contacts/selectorsContacts';\nimport { getFilter } from 'redux/filter/selectorsFilter';\nimport { Heading } from '@chakra-ui/react';\n\nexport const ContactsPage = () => {\n  const { items, isLoading, error } = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const valueRef = useRef(true);\n  const firstRender = useRef(true);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (valueRef.current) {\n      valueRef.current = false;\n      dispatch(fetchContacts());\n    }\n    return () => {\n      dispatch(clearContacts());\n    };\n  }, [dispatch]);\n\n  const formSubmitHandler = data => {\n    duplicatedContact(data);\n  };\n\n  const changeFilter = e => {\n    dispatch(setFilter(e.currentTarget.value));\n  };\n\n  const getVisibleContacts = () => {\n    if (items) {\n      const normalizaFilter = filter.toLowerCase();\n      return items.filter(item =>\n        item.name.toLocaleLowerCase().includes(normalizaFilter)\n      );\n    }\n  };\n\n  const duplicatedContact = data => {\n    const normalizaName = data.name.toLocaleLowerCase();\n\n    //check for duplicate name\n    const result = items.find(\n      item => normalizaName === item.name.toLocaleLowerCase()\n    );\n\n    //checking if find() return 'object'\n    if (typeof result === 'object') {\n      window.alert(result.name + ' is already in contacts');\n    } else {\n      dispatch(addContact({ name: data.name, number: data.phone }));\n      firstRender.current = false;\n    }\n  };\n\n  const visibleContacts = getVisibleContacts();\n\n  return (\n    <>\n      <FormBlock>\n        <Heading fontSize=\"3xl\">Phonebook</Heading>\n      </FormBlock>\n      <FormBlock>\n        <ContactForm onSubmit={formSubmitHandler} />\n      </FormBlock>\n      <FormBlock>\n        <Heading fontSize=\"2xl\">Contacts</Heading>\n      </FormBlock>\n      <LoadingContainer>\n        <Filter onChange={changeFilter} />\n        {isLoading && <Loader />}\n      </LoadingContainer>\n\n      {items.length > 0 ? (\n        <ContactList contacts={visibleContacts} />\n      ) : (\n        !isLoading && <p>No contacts</p>\n      )}\n      {error && <RequestError>{error}</RequestError>}\n    </>\n  );\n};\n\nexport default ContactsPage;\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface HeadingProps\n  extends HTMLChakraProps<\"h2\">,\n    ThemingProps<\"Heading\"> {}\n\n/**\n * `Heading` is used to render semantic HTML heading elements.\n *\n * By default, renders as `h2` with themantic size `xl`\n *\n * @see Docs https://chakra-ui.com/docs/components/heading\n */\nexport const Heading = forwardRef<HeadingProps, \"h2\">(function Heading(\n  props,\n  ref,\n) {\n  const styles = useStyleConfig(\"Heading\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.h2\n      ref={ref}\n      className={cx(\"chakra-heading\", props.className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nHeading.displayName = \"Heading\"\n"],"names":["Form","styled","ErrorMessage","Button","Submit","PhoneIcon","createIcon","d","displayName","viewBox","contactSchema","yup","shape","name","matches","required","phone","ContactForm","onSubmit","useForm","defaultValues","resolver","yupResolver","register","handleSubmit","errors","formState","reset","inputName","nanoid","inputNumber","data","isInvalid","htmlFor","pointerEvents","color","I","type","placeholder","id","message","colorScheme","size","List","ListItem","ContactsBlock","UpdateButtonBlock","path","fill","EditIcon","stroke","strokeLinecap","strokeWidth","children","jsx","DeleteIcon","Overlay","ModalWindow","getContacts","state","phonebook","ButtonsBlock","UpdateForm","contactName","contactNumber","closeModal","items","useSelector","dispatch","useDispatch","useState","formContactName","setFormContactName","formContactNumber","setFormContactNumber","useEffect","normalizaName","toLocaleLowerCase","result","find","item","window","alert","patchContact","contactId","number","ckeckDuplicatedContact","fontSize","onChange","e","value","currentTarget","onClick","modalRoot","document","querySelector","Modal","handaleKeyDown","code","addEventListener","removeEventListener","createPortal","target","ContactList","contacts","isOpen","setIsOpen","setContactName","setContactNumber","idContact","setContactId","map","as","leftIcon","boxSize","modalOpen","deleteContact","filterSchema","filter","Filter","inputFilter","Loader","getFilter","filters","ContactsPage","isLoading","error","valueRef","useRef","firstRender","current","fetchContacts","clearContacts","duplicatedContact","addContact","visibleContacts","normalizaFilter","toLowerCase","includes","getVisibleContacts","setFilter","length","props","forwardRef","styles","className","rest","useStyleConfig","omitThemingProps","__css","h2","Heading","chakra","cx"],"sourceRoot":""}